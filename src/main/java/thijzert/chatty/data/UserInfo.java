package thijzert.chatty.data;

import javafx.scene.paint.Color;

import java.io.Serializable;
import java.util.Random;

/**
 * A collection of the info of a user.
 *
 * @author Thijzert
 */
public final class UserInfo implements Serializable {
    private static final long serialVersionUID = -7056645622910613806L;
    private final String name_;
    private final String color_;
    private final long id_;

    /**
     * Initializes the user info. It creates a user with a given name, and generates a random <code>Color</code>.
     * This is done by calling a color rgb with numbers generated by <code>Math.random()</code>:
     * <pre>
     *     Color.color(Math.random(), Math.random(), Math.random());
     * </pre>
     * <p>
     * It also adds an id to the user, which can be used for checking if two users are the same. The method for
     * generating a <code>long</code> user id is: creating a new <code>Random</code>, then calling <code>nextLong()</code>.
     * The reason that there is a <code>long</code> used instead of an <code>int</code>, is to reduce the chance of
     * getting two of the same id's in one runtime event.
     *
     * @param name name of the user
     * @see Color#color(double, double, double)
     * @see Math#random()
     * @see Random#nextLong()
     */
    public UserInfo(final String name) {
        name_ = name;
        color_ = Color.color(Math.random(), Math.random(), Math.random()).darker().toString();
        id_ = new Random().nextLong();
    }

    /**
     * Returns the name of the user.
     *
     * @return the name of the user
     */
    public String getName() {
        return name_;
    }

    /**
     * Returns the <code>Color</code> of the user.
     *
     * @return the <code>Color</code> of the user
     * @see Color
     */
    public Color getColor() {
        return Color.valueOf(color_);
    }

    /**
     * Returns the name of the user.
     *
     * @return the name of the user
     */
    @Override
    public String toString() {
        return getName();
    }

    /**
     * Checks if two users are the same. It compares the names and the id's.
     *
     * @param object the object to check if it is the same as the current <code>UserInfo</code>
     * @return Whether the <code>object</code> is the same as the current <code>UserInfo</code>. If <code>object</code> was not a <code>UserInfo</code>, the result will always be <code>false</code>.
     */
    @Override
    public boolean equals(final Object object) {
        if (object instanceof UserInfo) {
            final UserInfo userInfo = (UserInfo) object;
            return name_.equals(userInfo.name_) && id_ == userInfo.id_;
        } else {
            return false;
        }
    }
}